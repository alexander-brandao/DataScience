# Leitura da base de dados
base = read.csv('credit_data.csv')

# Apaga a coluna clientid
base$clientid = NULL

# Valores inconsistentes
base$age = ifelse(base$age < 0, 40.92, base$age)

# Valores faltantes
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)

# Escalonamento
base[, 1:3] = scale(base[, 1:3])

# podemos perceber que os valores da classe alvo estão sendo interpretados como
# dados categóricos. Para discricionar (torná-los discretos, ou seja factor)
# pecisaremos fazer o Encode da classe, 
# se não fizermos o encode da classe para um factor 
base$default = factor(base$default, levels = c(0,1))
install.packages("tidyverse")
# Divisão entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$default, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)

# acrescentamos a biblioteca para trabalhar com Naive
library(e1071)

# vamos criar o nosso classificador passando a matriz "base_treinamento[-4]"
# menos o atributo alvo para X e a base o atributo alvo "base_treinamento$default
# para y
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
print(classificador)

# agora vamos fazer as previsões. Pegando nossa base de dados base_teste
# e vamos verificar se o algoritmo está fazendo corretamente as previsões
previsoes = predict(classificador, newdata = base_teste[-4])
# agora, criamos uma tabela de frequências com a função table()
# A table() usa os fatores de classificação cruzada para criar uma tabela 
# das contagens em cada combinação de níveis de fatores.
matriz_confusao = table(base_teste[, 4], previsoes)
print(matriz_confusao)

# para visualizar o percentual de erros ou acertos vamos instalar mais um pacote
install.packages('caret')
library(caret)
confusionMatrix(matriz_confusao)